#!/bin/bash

set -e # terminate if any commands with a non-zero exit code -> fail fast!
set -f # do not interpret * as wildcard -> required for maven mirrors

#######################
# READ ONLY VARIABLES #
#######################

readonly POM_FILE="pom.xml"
readonly GRADLE_FILE="build.gradle"
readonly MVN_MIRROR_SETTING_XML="/etc/maven/mvn_mirror.xml"

####################
# GLOBAL VARIABLES #
####################

# MVN_OPTIONS ... can be used to add additional option to the maven execution. 
#                 e.g. MVN_OPTIONS="-DskipTests"
#
# CONTEXT_DIR ... can be used to define the location of the pom file within the git repository when the entire folder structure of the repository is required. Otherwise use contextDir in your buildconfig.
#                 e.g. CONTEXT_DIR=helloworld would use helloworld/pom.xml
#
# MVN_MIRROR  ... can be used to specify maven mirror repositories
#
#                 a maven repository mirroring all required dependencies can be specified via:
#                    *|http:/my-mirror.com/path/to/repo
#
#                 multiple mirrors can be specified such that mirror-A is used for central and mirror-B is used for jboss
#                    central|http:/mirror-A/path/to/repo;jboss|http:/mirror-B/path/to/repo;
#
# MVN_MIRROR_ALLOW_FALLBACK ... true / false; default is false
#                               false ... fail if mirror is unavailable
#                               true ... if mirror is unavailable faill back to repositories specified in pom.xml

##########
# SCRIPT #
##########

main () {
    echo "[INFO] Installing application source..."
    cp -Rf /tmp/src/. ./

    if [ -f "./${CONTEXT_DIR}/${POM_FILE}" ]; then
        echo "[INFO] Maven build detected in ./${CONTEXT_DIR}/${POM_FILE}"
        if [ -z "${MVN_MIRROR}" ]; then
            echo """[INFO] no MVN_MIRROR Environment variable set - using default repositories configured in pom.xml
[INFO] You can set the MVN_MIRROR environment variable to specify maven mirror repositories in order to speed up your build process.
[INFO] 
[INFO] Syntax: 
[INFO]   mirrorof|url[;mirrorof|url]
[INFO]   
[INFO]   Sidenote: [] are used to convey optional values and are not part of the syntax
[INFO] 
[INFO] Example configurations:
[INFO]   a maven repository mirroring all required dependencies can be specified via:
[INFO]     MVN_MIRROR=\"*|http:/my-mirror.com/path/to/repo\"
[INFO]   
[INFO]   specifying multiple mirrors
[INFO]      MVN_MIRROR=\"central|http:/mirror-A/path/to/repo;jboss|http:/mirror-B/path/to/repo\"
"""
        else
            local mvn_mirror=${MVN_MIRROR//[[:blank:]]/} # remove potential whitespaces
            local mvn_mirror_array=(${mvn_mirror//;/ })  # split based on ;
            
            # create setting.xml structure
            echo '''<?xml version="1.0" encoding="UTF-8"?>
        <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
        <mirrors>''' > ${MVN_MIRROR_SETTING_XML}

            # for each mirror defined do
            for mirror in "${mvn_mirror_array[@]}"; do
                local mvn_mirror_info=(${mirror//|/ }) # split based on |
                
                local mvn_mirror_id=$(cat /proc/sys/kernel/random/uuid)
                local mvn_mirror_of=${mvn_mirror_info[0]}
                local mvn_mirror_url=${mvn_mirror_info[1]}
                
                if [ -z "${mvn_mirror_id}" ] || [ -z "${mvn_mirror_of}" ] || [ -z "${mvn_mirror_url}" ] ; then
                    >&2 echo """[ERROR] - could not prozess MVN_MIRROR.
    [ERROR] - MAVEN_MIRROR=\"${MVN_MIRROR}\"
    [ERROR] - Could not prozess mirror_id=\"${mvn_mirror_id}\", mirror_of=\"${mvn_mirror_of}\", url=\"${mvn_mirror_url}\""""
                    exit 1
                else
                    local maven_mirror_status_code=$(curl --silent --output /dev/null --write-out "%{http_code}" ${mvn_mirror_url})
                    if [ "${maven_mirror_status_code}" -ne "200" ]; then
                        if [ "${MVN_MIRROR_ALLOW_FALLBACK}" = true ]; then
                            >&2 echo "[WARN] - default s2i/bin/assemble script could not reach mirror \"${mvn_mirror_url}\". Mirror failed with http code \"${maven_mirror_status_code}\". Falling back to repositories defined in pom.xml for mirror: \"${mvn_mirror_of}\""
                        else
                            >&2 echo "[ERROR] - default s2i/bin/assemble script could not reach ${mvn_mirror_url}. Mirror failed with http code \"${maven_mirror_status_code}\""
                            exit 1
                        fi
                    else
                        echo "[INFO] Adding mirror ${mvn_mirror_url} for \"${mvn_mirror_of}\""
                        echo """    <mirror>
                <id>${mvn_mirror_id}</id>
                <name>${mvn_mirror_id}</name>
                <url>${mvn_mirror_url}</url>
                <mirrorOf>${mvn_mirror_of}</mirrorOf>
            </mirror>""" >> ${MVN_MIRROR_SETTING_XML}
                    fi
                fi 
            done
            
            echo '''  </mirrors>
</settings>''' >> ${MVN_MIRROR_SETTING_XML}
        
        fi

        local settings=""
        if [ -f $MVN_MIRROR_SETTING_XML ]; then
            echo "[INFO] apply mirror configuration"
            settings="-s ${MVN_MIRROR_SETTING_XML}"
        fi
        (cd ./$CONTEXT_DIR/ && mvn clean package ${settings} ${MVN_OPTIONS})

    elif [ -f $GRADLE_FILE ]; then
        echo "[INFO] Gradle build detected"
        gradle build
    else
        >&2 echo "ERROR] - could not find ${POM_FILE} or ${GRADLE_FILE}." 
        exit 1
    fi
}

main $@